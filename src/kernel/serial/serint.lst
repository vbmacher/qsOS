Turbo Assembler	 Version 3.1	    01/10/06 16:05:18	    Page 1
serint.asm



      1					 ;
      2					 ; SERINT.ASM
      3					 ;
      4					 ; (c) Copyright 2005, vbmacher
      5					 ;
      6					 ; Interrupt handler + communication protocol level 0
      7					 ;
      8					 ; Protokol urovne 0 vykonava fyzicke posielanie dat cez
      9					 ; linku, a kazdy znak odosle/prijme dva krat. Pokial znak
     10					 ; nebol prijaty 2 krat	za sebou, niekde nastal	zmatok a prijaty
     11					 ; znak	sa ignoruje.
     12					 ; Protokol by mal vediet pracovat so vsetkymi COM portami (od 1 po 4).
     13
     14
     15					 ; Problemy a Riesenia
     16					 ; ^^^^^^^^^^^^^^^^^^^
     17					 ;
     18					 ; problem1
     19					 ; ^^^^^^^^
     20					 ; Predavanie premennych - z assembleru	do C ide ale z C do assembleru NIE
     21					 ; A rovnako tak volanie funkcii - zaujimave je	vsak, ze pri volani funkcie
     22					 ; main	z start.asm v pohode ide...
     23					 ; RIESENIE: volanie funkcii musi ist cez lomitka: napr. 'call [_comSCANBUF]'
     24					 ; a co	sa tyka	premennych: ked	su v cecku premenne globalne, tak v assembleri
     25					 ; su extrn deklarovane	v segmente code	a nie data!!
     26					 ;
     27					 ; problem2
     28					 ; ^^^^^^^^
     29					 ; Cez virtualny port vo VMWare	VirtualMachine komunikacia prebieha v pohode,
     30					 ; no v	reale nie. Skusanie na 67% potvrdilo, ze skutocny port pri vysielani
     31					 ; retazca posiela z neho iba jeden znak, teda akoby ostatne vynechaval...
     32					 ; Druhou moznostou (33%) je to, ze sa znaky vysielaju vsetky, ale nefunguje
     33					 ; spravne prijimacia jednotka...
     34					 ; ODOVODNENIE:	situacia suvisi	s rychlostou skutocneho	UARTu a	CPU. Kedze
     35					 ; Vo VMWare je	UART simulovany	CPU, cize jeho rychlost	je rovnaka ako rychlost
     36					 ; CPU.	Kedze je aj posielanie znakov realizovane cez prerusenie: pri odosielani
     37					 ; znaku je umelo vyvolane prerusenie, ktore otvori komunikacny	kanal portu, posle
     38					 ; znak	a zase ho uzavrie. Otvorenie a uzavretie komunikacneho kanalu vo VMWare
     39					 ; trva	nepatrny cas, ale v skutocnom porte to trva ovela dlhsie. Preto	posielanie
     40					 ; niekolkych znakov za	sebou sposobuje	pri pouziti skutocneho portu ich stratu	z
     41					 ; dovodu cakacej doby pre otvorenie resp. uzavretie komunikacneho kanalu.
     42					 ; RIESENIE: Najprv som	po overeni vyvolal po kazdom poslani znaku prerusenie,
     43					 ; int 10h na zistenie polohy kurzora na obrazovke. Cas	na vykonanie tohto
     44					 ; prerusenia bohate stacil na vnutornu	operaciu UARTu pri otvarani/uzatvarani
     45					 ; komunikacneho kanalu. No kedze to nie je prilis efektne riesenie, rozhodol
     46					 ; som sa, rovnako ako pri procedure serRX, poslat cely	buffer naraz pri jednorazovom
     47					 ; otvoreni kom. kanalu. To ma odlahci od pouzivani zvlastnych rieseni a tiez
     48					 ; odbremeni UART od ustavicneho otvarania/zatvarania kom. kanalu
     49
     50
     51					 masm
     52	    0000			 .model	compact
     53					 .386
     54	    0000			 .data
     55						 ; konstanty fyzickeho prenosu,	prve hlavicky dat
     56		  =0015				 charSTART equ 15h
     57		  =0016				 charEND equ 16h
Turbo Assembler	 Version 3.1	    01/10/06 16:05:18	    Page 2
serint.asm



     58
     59						 ; RX jednotka
     60	    0000  00				 rx_count db 0	  ; index znaku	(max. 3)
     61	    0001  00				 rx_chr	db 0	  ; aktualne nacitany znak (resp. prvy znak z trojice)
     62	    0002  0000				 buf_ind dw 0	  ; index v bufferi
     63
     64						 ; INT unit
     65	    0004  0110r	00E0r 0046r   +		 int_servicetab	dw serMODEM, _serTX, serRX, serSTATUS
     66		  011Ar
     67
     68	    000C			 .code
     69						 extrn _serBUF:near ; prijimaci	buffer,	premenna velkosti 512 bytov
     70						 extrn _comSCANBUF:near
     71						 extrn _PORT: word
     72
     73					 ; interrupt - seriove prerusenie daneho portu -
     74					 public	_serINT
     75	    0000			 _serINT proc near
     76	    0000  60				 pusha
     77	    0001  06				 push es
     78	    0002  1E				 push ds
     79
     80	    0003  E4 21				 in al,	21h
     81	    0005  0C FF				 or al,	0FFh	 ; zakazanie preruseni UARTu
     82	    0007  E6 21				 out 21h, al
     83
     84	    0009  B0 20				 mov al, 20h	 ; vyslanie signalu EOI	do 8259
     85	    000B  E6 20				 out 20h, al
     86
     87	    000D			 int_loop:
     88	    000D  2E: 8B 16 0000e		 mov dx, word ptr [_PORT]
     89	    0012  83 C2	02			 add dx, 2	 ; Interrupt Identification Register
     90	    0015  EC				 in al,	dx
     91	    0016  A8 01				 test al, 1	 ; je prerusenie ?
     92	    0018  75 0C				 jnz @@INT_ret	 ; nie
     93	    001A  25 0006			 and ax, 6	 ; spristupni len identifikaciu	prerusenia, ktore
     94								 ; bude	tvorit vlastne index v tabulke adries
     95								 ; procedur na obsluhu toho-ktoreho prerusenia
     96	    001D  8B F0				 mov si, ax
     97	    001F  2E: FF 94 0004r		 call word ptr cs:int_servicetab[si] ;zavolanie	prislusnej procedury
     98	    0024  EB E7				 jmp int_loop
     99	    0026			 @@INT_ret:
    100
    101	    0026  E4 21				 in al,	21h
    102	    0028  32 C0				 xor al, al	 ; povolenie vsetkych preruseni	na ICU
    103	    002A  E6 21				 out 21h, al
    104
    105	    002C  1F				 pop ds
    106	    002D  07				 pop es
    107	    002E  61				 popa
    108	    002F  CF				 iret
    109	    0030			 _serINT endp
    110
    111					 ; funkcia zmaze buffer
    112	    0030			 clearBUFFER proc
    113	    0030  51				 push cx
    114	    0031  57				 push di
Turbo Assembler	 Version 3.1	    01/10/06 16:05:18	    Page 3
serint.asm



    115	    0032  06				 push es
    116
    117	    0033  33 C0				 xor ax, ax
    118	    0035  A3 0002r			 mov word ptr [buf_ind], ax		 ; vynuluje index v bufferi
    119
    120	    0038  B9 0100			 mov cx, 256				 ; hmm velkost buffera
    121	    003B  BF 0000e			 mov di, offset	_serBUF
    122	    003E  0E				 push cs				 ; premenna _serBUF je
    123											 ; globalna, preto jej
    124											 ; segmentova cast adresy
    125											 ; sa nachadza v CS
    126	    003F  07				 pop es
    127	    0040  F3> AB			 rep stosw				 ; zmaze buffer
    128
    129	    0042  07				 pop es
    130	    0043  5F				 pop di
    131	    0044  59				 pop cx
    132	    0045  C3				 ret
    133	    0046			 clearBUFFER endp
    134
    135					 ;*****************************	jednotlive funkcne jednotky ************************
    136
    137					 ; jednotka na prijimanie znakov
    138					 ; - protocol level0: 2x prijimanie rovnakeho znaku
    139	    0046			 serRX proc near
    140	    0046  2E: 8B 16 0000e		 mov dx, word ptr [_PORT]		 ; aktualny COM	port
    141	    004B  EC				 in al,	dx				 ; citanie z portu
    142
    143	    004C  8A 1E	0000r			 mov bl, byte ptr [rx_count]		 ; BL <- index znaku
    144	    0050  0A DB				 or bl,	bl				 ; BL =	0 ?
    145	    0052  75 0A				 jnz cmp_chars				 ; ak nie, skok
    146	    0054  A2 0001r			 mov byte ptr [rx_chr],	al		 ; inak	do znaku sa da nacitany	znak
    147	    0057  C6 06	0000r 01		 mov byte ptr [rx_count], 1		 ; index znaku <- 1
    148
    149	    005C  EB 6B				 jmp @@RX_ret				 ; vrat	sa, toto je len	prvy znak
    150
    151	    005E			 cmp_chars:
    152	    005E  3A 06	0001r			 cmp al, byte ptr [rx_chr]		 ; v AL	je nacitany znak z portu,
    153											 ; AL =	predch.	?
    154	    0062  74 0A				 je inc_ind				 ; ak ano, skok
    155
    156	    0064  A2 0001r			 mov byte ptr [rx_chr],	al		 ; inak	je to neocakavany znak,	ktory
    157											 ; z dovodu synchronizacie sa
    158											 ; pouzije ako novy znak
    159	    0067  C6 06	0000r 01		 mov byte ptr [rx_count], 1		 ; index znaku <- 1
    160	    006C  EB 5B				 jmp @@RX_ret				 ; a skok na navrat
    161
    162	    006E			 inc_ind:
    163	    006E  FE 06	0000r			 inc byte ptr [rx_count]
    164	    0072  80 3E	0000r 01		 cmp byte ptr [rx_count], 1
    165	    0077  7F 02				 jg scan_char				 ; ak rx_count > 2, skok
    166	    0079  EB 4E				 jmp @@RX_ret				 ; inak	skok na	navrat
    167
    168					  ;tu uz je znak pripraveny, rozlisuje sa druh znaku
    169	    007B			 scan_char:
    170	    007B  32 C0				 xor al, al
    171	    007D  A2 0000r			 mov byte ptr [rx_count], al		 ; indexacia znaku odznova
Turbo Assembler	 Version 3.1	    01/10/06 16:05:18	    Page 4
serint.asm



    172
    173						 ;zisti, ake data prisli
    174	    0080  A0 0001r			 mov al, byte ptr [rx_chr]
    175
    176	    0083  3C 15				 cmp al, charSTART
    177	    0085  75 05				 jne cEND
    178	    0087			 cSTART:
    179	    0087  E8 FFA6			 call clearBUFFER
    180	    008A  EB 3D				 jmp @@RX_ret
    181	    008C			 cEND:
    182	    008C  3C 16				 cmp al, charEND
    183	    008E  75 0D				 jne cDATA
    184
    185	    0090  8B 1E	0002r			 mov bx, word ptr [buf_ind]
    186	    0094  43				 inc bx
    187	    0095  BE 0000e			 mov si, offset	_serBUF
    188	    0098  C6 00	00			 mov byte ptr [bx+si], 0		 ; ASCIIz na koniec stringu
    189	    009B  EB 1F				 jmp @@RX_dready			 ; koniec prijimania dat, navrat
    190
    191	    009D			 cDATA:
    192	    009D  A0 0001r			 mov al, byte ptr [rx_chr]
    193	    00A0  BF 0000e			 mov di, offset	_serBUF
    194	    00A3  03 3E	0002r			 add di, word ptr [buf_ind]
    195	    00A7  0E				 push cs
    196	    00A8  07				 pop es
    197	    00A9  AA				 stosb
    198	    00AA  81 EF	0000e			 sub di, offset	_serBUF
    199	    00AE  89 3E	0002r			 mov word ptr [buf_ind], di
    200	    00B2  81 FF	01FF			 cmp di, 511				 ; velkost buffera - 0ovy znak pre ASCIIz
    201	    00B6  7E 11				 jle @@RX_ret
    202	    00B8  B0 16				 mov al, charEND
    203	    00BA  EB D0				 jmp short cEND
    204
    205	    00BC			 @@RX_dready:
    206	    00BC  1E				 push ds
    207	    00BD  06				 push es
    208	    00BE  8C C8				 mov ax, cs
    209	    00C0  8E D8				 mov ds, ax
    210	    00C2  8E C0				 mov es, ax
    211
    212	    00C4  E8 0000e			 call [_comSCANBUF]			 ; protokol urovne 1
    213
    214	    00C7  07				 pop es
    215	    00C8  1F				 pop ds
    216
    217	    00C9			 @@RX_ret:
    218	    00C9  2E: 8B 16 0000e		 mov dx, word ptr [_PORT]
    219	    00CE  83 C2	05			 add dx, 5				 ; Line	Status Register	(LSR)
    220	    00D1  EC				 in al,	dx
    221	    00D2  A8 01				 test al, 1				 ; su dalsie data ?
    222	    00D4  0F 85	FF6E			 jne serRX				 ; ak ano, skok
    223	    00D8  A8 40				 test al, 40h
    224	    00DA  74 03				 je @real_ret
    225	    00DC  E8 0001			 call _serTX
    226	    00DF			 @real_ret:
    227	    00DF  C3				 ret
    228	    00E0			 serRX endp
Turbo Assembler	 Version 3.1	    01/10/06 16:05:18	    Page 5
serint.asm



    229
    230
    231					 ; jednotka na vysielanie znakov
    232					 ; 2x posle znak
    233					 public	_serTX
    234	    00E0			 _serTX	proc near
    235	    00E0  BE 0000e			 mov si, offset	_serBUF
    236	    00E3  FC				 cld
    237	    00E4			 dalsi_posli:
    238	    00E4  AC				 lodsb
    239	    00E5  8A D8				 mov bl, al
    240	    00E7  0A C0				 or al,	al
    241	    00E9  74 1A				 jz tx_end
    242
    243	    00EB  B9 0002			 mov cx, 2
    244	    00EE			 tx_posli:
    245	    00EE  49				 dec cx
    246	    00EF  8A C3				 mov al, bl
    247
    248	    00F1  2E: 8B 16 0000e		 mov dx, word ptr [_PORT]
    249	    00F6  EE				 out dx, al		    ; vysielanie znaku
    250
    251	    00F7  83 C2	05			 add dx, 5
    252	    00FA			 test_again:
    253	    00FA  EC				 in al,	dx		    ; citanie registra LSR (aby	sa vynuloval transmitter)
    254	    00FB  A8 20				 test al, 20h
    255	    00FD  74 FB				 je test_again
    256
    257	    00FF  0B C9				 or cx,	cx
    258	    0101  75 EB				 jne tx_posli
    259
    260	    0103  EB DF				 jmp short dalsi_posli
    261	    0105			 tx_end:
    262	    0105  2E: 8B 16 0000e		 mov dx, word ptr [_PORT]
    263	    010A  42				 inc dx
    264	    010B  EC				 in al,	dx
    265	    010C  24 0D				 and al, 00001101b
    266	    010E  EE				 out dx, al		    ; zakaze THRE
    267
    268	    010F  C3				 ret
    269	    0110			 _serTX	endp
    270
    271					 ; iba precita register
    272	    0110			 serMODEM proc near
    273	    0110  2E: 8B 16 0000e		 mov dx, word ptr [_PORT]
    274	    0115  83 C2	06			 add dx, 6
    275	    0118  EC				 in al,	dx
    276	    0119  C3				 ret
    277	    011A			 serMODEM endp
    278
    279					 ; iba precita register
    280	    011A			 serSTATUS proc	near
    281	    011A  2E: 8B 16 0000e		 mov dx, word ptr [_PORT]
    282	    011F  83 C2	05			 add dx, 5
    283	    0122  EC				 in al,	dx
    284	    0123  C3				 ret
    285	    0124			 serSTATUS endp
Turbo Assembler	 Version 3.1	    01/10/06 16:05:18	    Page 6
serint.asm



    286
    287
    288					 ;**************************** EXPORT *********************************
    289
    290					 ;inicializacia	UARTu
    291					 public	_initUART
    292	    0124			 _initUART proc	c
    293						 arg uartONMASK:byte
1   294	    0124  C8 0000 00			 ENTERW	 00000h,0
1   295	    0128  52				 push dx
    296
    297	    0129  2E: 8B 16 0000e		 mov dx, word ptr [_PORT]
    298	    012E  83 C2	02			 add dx, 2
    299	    0131  32 C0				 xor al, al
    300	    0133  EE				 out dx, al			 ; zmaze a zakaze FIFO obvody
    301	    0134  4A				 dec dx
    302	    0135  B0 01				 mov al, 00000001b
    303	    0137  EE				 out dx, al			 ; povoli RX prerusenia
    304	    0138  4A				 dec dx
    305	    0139  EC				 in al,	dx			 ; zmaze prijaty byte
    306	    013A  83 C2	05			 add dx, 5
    307	    013D  EC				 in al,	dx			 ; zmaze status	linky
    308	    013E  42				 inc dx
    309	    013F  EC				 in al,	dx			 ; zmaze status	modemu
    310
    311						 ; podla typu COM portu	uvolni dane prerusenie na ICU
    312						 ; (Interrupt Control Unit) - jednotka spravy preruseni
    313	    0140  E4 21				 in al,	21h
    314	    0142  22 46	04			 and al, byte ptr [uartONMASK]
    315						 ;xor al, al ; povoli vsetky prerusenia
    316	    0145  E6 21				 out 21h, al
    317
    318	    0147  5A				 pop dx
1   319	    0148  C9				 LEAVEW
1   320	    0149  C3				 RET	 00000h
    321	    014A			 _initUART endp
    322
    323					 ;deinicializacia UARTu
    324					 ;POZOR!! procedura moze volat az po volani procedury portINFO,
    325					 ;pretoze meni vektory prerusenia
    326					 public	_deinitUART
    327	    014A			 _deinitUART proc c
    328						 arg uartINT:byte, uartOLDINT:dword, uartOFFMASK:byte
1   329	    014A  C8 0000 00			 ENTERW	 00000h,0
1   330	    014E  53				 push bx
    331	    014F  52				 push dx
    332
    333	    0150  06				 push es
    334	    0151  FA				 cli
    335	    0152  33 C0				 xor ax, ax
    336	    0154  33 DB				 xor bx, bx
    337	    0156  8E C0				 mov es, ax
    338	    0158  8A 5E	04			 mov bl, byte ptr [uartINT]
    339	    015B  C1 E3	02			 shl bx, 2
    340	    015E  3E: 8B 46 06			 mov ax, word ptr ds:[uartOLDINT]
    341	    0162  26: 89 07			 mov word ptr es:[bx], ax
    342	    0165  3E: 8B 46 08			 mov ax, word ptr ds:[uartOLDINT+2]
Turbo Assembler	 Version 3.1	    01/10/06 16:05:18	    Page 7
serint.asm



    343	    0169  26: 89 47 02			 mov word ptr es:[bx+2], ax
    344	    016D  FB				 sti
    345	    016E  07				 pop es
    346
    347	    016F  E4 21				 in al,	21h			 ; maskovanie prerusenia UARTu
    348	    0171  0A 46	0A			 or al,	byte ptr [uartOFFMASK]
    349	    0174  E6 21				 out 21h, al
    350
    351	    0176  2E: 8B 16 0000e		 mov dx, word ptr [_PORT]
    352	    017B  42				 inc dx
    353	    017C  32 C0				 xor al, al			 ; zakaze prerusenia v UARTe
    354	    017E  EE				 out dx, al
    355	    017F  83 C2	03			 add dx, 3
    356	    0182  EE				 out dx, al			 ; a odpoji UART z ICU
    357
    358	    0183  5A				 pop dx
    359	    0184  5B				 pop bx
    360
1   361	    0185  C9				 LEAVEW
1   362	    0186  C3				 RET	 00000h
    363	    0187			 _deinitUART endp
    364
    365
    366					 end
Turbo Assembler	 Version 3.1	    01/10/06 16:05:18	    Page 8
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "01/10/06"
??FILENAME			  Text	 "serint  "
??TIME				  Text	 "16:05:18"
??VERSION			  Number 030A
@32BIT				  Text	 0
@@INT_RET			  Near	 _TEXT:0026
@@RX_DREADY			  Near	 _TEXT:00BC
@@RX_RET			  Near	 _TEXT:00C9
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 1
@FILENAME			  Text	 SERINT
@INTERFACE			  Text	 00H
@MODEL				  Text	 3
@REAL_RET			  Near	 _TEXT:00DF
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BUF_IND				  Word	 DGROUP:0002
CDATA				  Near	 _TEXT:009D
CEND				  Near	 _TEXT:008C
CHAREND				  Number 0016
CHARSTART			  Number 0015
CLEARBUFFER			  Near	 _TEXT:0030
CMP_CHARS			  Near	 _TEXT:005E
CSTART				  Near	 _TEXT:0087
DALSI_POSLI			  Near	 _TEXT:00E4
INC_IND				  Near	 _TEXT:006E
INT_LOOP			  Near	 _TEXT:000D
INT_SERVICETAB			  Word	 DGROUP:0004
RX_CHR				  Byte	 DGROUP:0001
RX_COUNT			  Byte	 DGROUP:0000
SCAN_CHAR			  Near	 _TEXT:007B
SERMODEM			  Near	 _TEXT:0110
SERRX				  Near	 _TEXT:0046
SERSTATUS			  Near	 _TEXT:011A
TEST_AGAIN			  Near	 _TEXT:00FA
TX_END				  Near	 _TEXT:0105
TX_POSLI			  Near	 _TEXT:00EE
UARTINT				  Number [DGROUP:BP+0004]
UARTOFFMASK			  Number [DGROUP:BP+000A]
UARTOLDINT			  Number [DGROUP:BP+0006]
UARTONMASK			  Number [DGROUP:BP+0004]
_COMSCANBUF (_comSCANBUF)	  Near	 _TEXT:---- Extern
_DEINITUART (_deinitUART)	  Near	 _TEXT:014A
_INITUART (_initUART)		  Near	 _TEXT:0124
_PORT (_PORT)			  Word	 _TEXT:---- Extern
_SERBUF	(_serBUF)		  Near	 _TEXT:---- Extern
_SERINT	(_serINT)		  Near	 _TEXT:0000
_SERTX (_serTX)			  Near	 _TEXT:00E0
Turbo Assembler	 Version 3.1	    01/10/06 16:05:18	    Page 9
Symbol Table




Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  000C Word	  Public  DATA
_TEXT				  16  0187 Word	  Public  CODE
